
public class Main {
	public static void main(String[] args) {

		// 1_ 우리가 만날 수 있는 잘못된 상황들
		// 1. Error(오류) : 실행불가!
		// 2. Exception(예외): 실행 중(RunTime) 문제 발생! [ 앱 사용 중에 다운되는 상황 ]

		// 2_ Exception 의 대표적인 예
		// 1. 사용자가 잘못된 데이터를 입력하는 경우 : 숫자입력 상황에 문자를 입력하는 상황
		// 2. 개발자가 개발 로직이나 계산을 잘못한 경우 : 배열의 인덱스번호 오류 or 0 으로 나눗셈
		// 3. 네트워크나 하드웨어 오류 : 하드디스크의 파일 제어 오류, 특정 사이트(서버) 접속 오류(URL 실수, 서버 불량 등)

		// 3_ 예외처리에 대한 실습 - 예외는 발생하지만, 앱이 다운되지 않도록 하는 문법.
		System.out.println("예외처리에 대해 알아봅시다.");

		// 4_ 예외상황
		// System.out.println( 10 / 0 ); // 이곳에서 예외가 발생하며 이 순간 프로그램이 다운되버림. 즉, 아래 코드들이 실행되지 않음.
		// 예외처리는 이런 앱이 실행중에 멈춰버리는 문제를 미연에 방지해서 아래 코드들이 정상적으로 실행되도록 하는 기법.
		// 즉, 예외는 없도록 하는것이 아니라 예외가 발생해도 다운되지 않도록 하는것임. 예외는 발생한다! 다만 그 처리에 관한 기법이다!
		// if 문법으로 예외 상황을 방지하는 것도 방법이다! 다만, 모든 상황을 대처하지는 못함.
		// 또한 경우에 따라서 일단 실행해 봐야 예외인지 아닌지를 파악할 수 있는 경우도 있음. [ 예) 네트워크 접속 ]
		// 이럴때 사용하는 문법 - 예외처리

		// 5_
		// 1. 0으로 나눗셈
		int a = 0;
		try {
			System.out.println(10 / a);	// 5_1 예외발생 가능성이 있는 코드
		}catch(ArithmeticException e){
			// 5_2 예외가 발생할 때 실행되는 영역
			System.out.println("예외가 발생했어요!");
			System.out.println("예외 메시지 : " + e.getMessage());
		}
		

		System.out.println("\n프로그램 종료\n");

	}
}
