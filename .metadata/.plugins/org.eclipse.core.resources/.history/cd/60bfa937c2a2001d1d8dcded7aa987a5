
public class ControlThread {

	public static void main(String[] args) {
		
		// wait()와 notify() 연습 
		// 1_ 타이어 조립하는 직원객체를 생성하자!
		CThread t = new CThread();
		t.start();
		
		// 5_ 그래서 한번 더 시키려고 다시 실행시켜 보았다.
		t.start(); // error!! : Thread 는 run 메소드가 끝나면 더이상 실행할 수 없다..!!! 일회용 실행임. 미친놈
		
		// 6_ 그러면 이렇게 해보자. 새로운 직원을 뽑아서 다시 실행시켜 보자.
		t = new CThread();
		t.start();
		// 7_ 이렇게 하다보니, 비동기적 특성에 의해 내가 원하던 그림이 안나오고, 효율성도 안좋다. 그래서...
		
		
		
				
		
	}

}

// 2_ 타이어 조립 작업을 하는 스레드 설계
class CThread extends Thread {
	@Override
	public void run() {
		// 3_ 4개의 타이어를 조립하자
		System.out.println("1번 타이어 조립");
		System.out.println("2번 타이어 조립");
		System.out.println("3번 타이어 조립");
		System.out.println("4번 타이어 조립");
		run();
		System.out.println("퇴근~");
	} // 4_ start() 를시작하면 여기까지 해야 끝난다. 그래서 너무 빨리 퇴근시키는것 같아서 여러번 하게 만들고싶다..
}
