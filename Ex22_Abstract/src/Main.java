
public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		// 68_ 추상클래스의 문법적 특징 알아보기. 어따써요? -> 이건 나중에 예제 많이 보고 해서 이해하자.
		// 70_ 추상클래스는 곧바로 객체생성이 불가!
		Test t;// 참조변수까지는 만들수 있다!
		//t = new Test(); ERROR! 단, 객체생성은 오류!
		
		// 73_ 추상클래스를 사용하려면, 상속한 클래스를 설계하여 객체로 생성해 사용한다! 
		// 즉, Test 라는 이름의 추상클래스를 상속하는 Nice 라는 클래스를 설계해보자! 
		Nice nice = new Nice();
		nice.aaa();
		
		// 76_ 추상클래스를 상속한 클래스들은 반드시 추상메소드를 구현해야만 하기에
		// 특정 메소드를 반드시 보유하게끔 강제할 수 있다는 특징이 있다.
		
		// 클래스들이 있다. 참조해서 관리하기가 어렵다 - 추상적인 클래스를 만들어서 관리! 실수로 new 할수도 있으니 new 를 막는 문법이 필요~ -> 추상클래스 탄생
		// 부모한테 메소드의 이름을 정해놓자~ 쓰잘떼기 없는 중괄호가 없고 추상메소드를 반드시 오버라이드해서 구현해야한다. 
		
		// 77_ Test 클래스를 상속하는 또 다른 클래스를 설계해보자
		Hello h = new Hello();
		h.aaa();
	}

}
